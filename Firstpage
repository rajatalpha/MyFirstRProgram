library(shiny)
library(shinydashboard)
library(DT)
library(psych)
library(DataExplorer)


convertMenuItem <- function(mi,tabName) {
  mi$children[[1]]$attribs['data-toggle']="tab"
  mi$children[[1]]$attribs['data-value'] = "tabName"
  mi
}


UI <-dashboardPage(
  dashboardHeader(title="Data Exploration"),
  dashboardSidebar(
    sidebarMenu(
      convertMenuItem(menuItem("Full data",tabName="Data",icon=icon("table"),startExpanded = TRUE,
                               fileInput("file","Upload CSV files",multiple=TRUE,accept=("text/comma")),
                               selectInput("select", "Select Variable","None", "placeholder 1",multiple = TRUE),
                               actionButton(inputId = "Go",label = "Go")
      ),"Data"),
      convertMenuItem(menuItem("Continous variables",tabName="Continous Variables",icon=icon("table"),
                               selectInput(inputId = "Contvariable",
                                           label = "Select Variable",
                                           choices="",selected=""
                               ),
                               # button
                               actionButton(inputId = "GoCON",label = "Go")
      ),"Continous variables"),
      convertMenuItem(menuItem("Categorical variables",tabName="Categorical variables",icon=icon("table"),
                               selectInput(inputId = "Catvariable",
                                           label = "Select Variable",
                                           choices="",selected=""
                               ),
                               actionButton(inputId = "GoCAT",label = "Go")
      ),"Categorical variables")
    )
  ),
  dashboardBody(
    tabsetPanel(
      tabPanel("Data",
         tabItem(tabName="Data",
              fluidRow(
                h2('A brief Look into the Datset'),
                DT::dataTableOutput("data.frame")),#end of 2nd Fluidrow
              fluidRow(
                h4("Subsetted Dataset"),
                DT::dataTableOutput("data.frame2"),
                h4("Structure of Dataset"),
                verbatimTextOutput("struct"),
                h4("Summary of dataset"),
                verbatimTextOutput("Summary")))), #end of 1st tab panel
      tabPanel("Continous variable",
       tabItem(tabName = "Continous Variables",
              fluidRow(
                h2("Welcome to Continous variable tab"),
                mainPanel(
                  plotOutput("histc")
                )
              )
      )),  # end of second tab panel
      tabPanel("Categorical variable",
       tabItem(tabName = "Categorical Variables",h2("New Content page 3"),
                       fluidRow(
                         verbatimTextOutput("Truetable")))
      )  # end Of last tabpanel
    ) # end Of tabsetpanel
  )         #Dashboard Body
)         ###End of Dashboard page

server<-shinyServer(function(input,output,session){
  values <- reactiveValues(df_data = NULL)
  
  observeEvent(input$file, {
    values$df_data <- read.csv(input$file$datapath)
    
    output$data.frame <-DT::renderDataTable(values$df_data)
    
    output$struct<-renderPrint({
      df <- values$df_data
      str(df)
    })
    
    output$Summary<-renderPrint({
      df <- values$df_data
      describe(df)})
  })
  ## update 'columns' selector
  observeEvent(input$file, {
    updateSelectInput(session, "select", choices = names(values$df_data))
    updateSelectInput(session, "Contvariable", choices = names(values$df_data[ ,!sapply(values$df_data, is.factor)]))
    updateSelectInput(session, "Catvariable", choices = names(values$df_data[,sapply(values$df_data, is.factor)]))
  })
  
  
  
  observeEvent(input$Go, {
    output$data.frame2 <- DT::renderDataTable({
      subset_table <- values$df_data[, input$select, drop = F]
      datatable(subset_table)
    })
  })
  observeEvent(input$GoCON, {
    output$summary <- renderPrint({
      df <- values$df_data
      df <- df[,input$Contvariable]
      describe(df) 
    })
    output$histc<-renderPlot({
      df <- values$df_data
      df <- df[,input$Contvariable]
      boxplot(df,col="sky blue",border="purple",main=input$Contvariable)
    })
  })
  observeEvent(input$GoCAT, {
    output$Truetable <- renderPrint({
      df <- values$df_data
      df <- df[,input$Catvariable]
      table(df) 
    })
  })
  
})
shinyApp(UI, server)

